//Mealy Sequence -101
module seq_mealy(
input x, input clk , input rst , output reg y );
reg [1:0]cst;
reg [1:0]nst;
parameter s0 = 2'b00 , s1 = 2'b01 , s2 = 2'b10;
always @(cst or x)
begin
case(cst)
s0: begin
 if (x)
begin
nst = s1;
y=0;
end
else
begin
nst = cst;
y=0;
end
end
s1: begin
if (x==0)
begin
nst = s2;
y=0;
end
else
begin
nst = cst;
y=0;
end
end
s2: begin
if (x)
begin
nst = s1;
y=1;
end
else
begin
nst = s0;
y=0;
end
end
default: nst = s0 ;
endcase
end
always@(posedge clk)
begin
if(rst)
cst <= s0;
else
cst <= nst;
end
endmodule
Test Bench:
module seq_mealy_tb;
// Inputs
reg x; reg clk; reg rst;
// Outputs
wire y;
// Instantiate the Unit Under Test (UUT)
seq_mealy uut (
.x(x), 
.clk(clk), 
.rst(rst), 
.y(y)
);
reg [19:0]data;
integer k;
initial begin
// Initialize Inputs
data = 20'b10100101011101010101;
clk = 0;
k=0;
rst = 1;
#60 rst =0 ;
// Wait 100 ns for global reset to finish
#340; // Add stimulus here
end
always@(posedge clk)
begin
x = data>>k;
k = k+1;
end
 always #20 clk=~clk;
endmodule